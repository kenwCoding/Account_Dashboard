import {
  ColumnType,
  Generated,
  Insertable,
  JSONColumnType,
  Selectable,
  Updateable,
} from 'kysely'

export enum Permission {
  READ_POSTS = 'read_posts',
  WRITE_POSTS = 'write_posts',
  READ_MESSAGES = 'read_messages',
  WRITE_MESSAGES = 'write_messages',
  READ_PROFILE_INFO = 'read_profile_info',
  WRITE_PROFILE_INFO = 'write_profile_info',
}

export enum InvitationState {
  PENDING = 'pending',
  ACCEPTED = 'accepted',
  REJECTED = 'rejected',
}

export interface Permissions {
  [Permission.READ_POSTS]: boolean;
  [Permission.WRITE_POSTS]: boolean;
  [Permission.READ_MESSAGES]: boolean;
  [Permission.WRITE_MESSAGES]: boolean;
  [Permission.READ_PROFILE_INFO]: boolean;
  [Permission.WRITE_PROFILE_INFO]: boolean;
}

export interface Database {
  user: UserTable
  permission_invite: PermissionInviteTable
}

export interface UserTable {
  id: Generated<number>
  username: string
  password: string
  is_verified: boolean
  created_at: ColumnType<Date, string | undefined, never>
  updated_at: ColumnType<Date, string | undefined, never>
}

export interface PermissionInviteTable {
  id: Generated<number>
  inviter_user_id: number
  invitee_user_id: number
  invitation_state: InvitationState
  permissions: JSONColumnType<{
    [Permission.READ_POSTS]: boolean
    [Permission.WRITE_POSTS]: boolean
    [Permission.READ_MESSAGES]: boolean
    [Permission.WRITE_MESSAGES]: boolean
    [Permission.READ_PROFILE_INFO]: boolean
    [Permission.WRITE_PROFILE_INFO]: boolean
  }>
  created_at: ColumnType<Date, string | undefined, never>
  updated_at: ColumnType<Date, string | undefined, never>
}

// export interface PostTable {
//   id: Generated<number>
//   title: string
//   content: string
//   authorId: number
//   createdAt: Date
//   updatedAt: Date
// }

// export interface MessageTable {
//   id: Generated<number>
//   senderId: number
//   recipientId: number
//   content: string
//   createdAt: Date
// }

// export interface UserProfileTable {
//   id: Generated<number>
//   userId: number
//   bio: string
//   avatarUrl: string
// }

// Example table schema interface.
// This interface describes the `person` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Person`,
// `NewPerson` and `PersonUpdate` types below.
export interface PersonTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>

  first_name: string
  gender: 'man' | 'woman' | 'other'

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  last_name: string | null

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  created_at: ColumnType<Date, string | undefined, never>

  // You can specify JSON columns using the `JSONColumnType` wrapper.
  // It is a shorthand for `ColumnType<T, string, string>`, where T
  // is the type of the JSON object/array retrieved from the database,
  // and the insert and update types are always `string` since you're
  // always stringifying insert/update values.
  metadata: JSONColumnType<{
    login_at: string
    ip: string | null
    agent: string | null
    plan: 'free' | 'premium'
  }>
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type Person = Selectable<PersonTable>
export type NewPerson = Insertable<PersonTable>
export type PersonUpdate = Updateable<PersonTable>

export interface PetTable {
  id: Generated<number>
  name: string
  owner_id: number
  species: 'dog' | 'cat'
}

export type Pet = Selectable<PetTable>
export type NewPet = Insertable<PetTable>
export type PetUpdate = Updateable<PetTable>